//
// Auto-generated by dnne-gen
//
// .NET Assembly: libEOSSDK-Mac-Shipping_cs
//

//
// Declare exported functions
//
#ifndef __DNNE_GENERATED_HEADER_LIBEOSSDK_MAC_SHIPPING_CS__
#define __DNNE_GENERATED_HEADER_LIBEOSSDK_MAC_SHIPPING_CS__

#include <stddef.h>
#include <stdint.h>
#ifdef DNNE_COMPILE_AS_SOURCE
    #include <dnne.h>
#else
    // When used as a header file, the assumption is
    // dnne.h will be next to this file.
    #include "dnne.h"
#endif // !DNNE_COMPILE_AS_SOURCE

// Computed from EOS_SDK._test.test_exports._TESTAddNotify
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _TESTAddNotify(int32_t number, intptr_t completionDelegate);

// Computed from EOS_SDK._test.test_exports._TESTRemoveNotify
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _TESTRemoveNotify(uint64_t id);

// Computed from EOS_SDK._test.test_exports._TESTTriggerNotify
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _TESTTriggerNotify(intptr_t completionDelegate);

// Computed from EOS_SDK.Others.Common._EOS_ByteArray_ToString
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ByteArray_ToString(intptr_t byteArray, uint32_t length, intptr_t outBuffer, uint32_t inOutBufferLength);

// Computed from EOS_SDK.Others.Common._EOS_ContinuanceToken_ToString
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ContinuanceToken_ToString(intptr_t continuanceToken, intptr_t outBuffer, int32_t inOutBufferLength);

// Computed from EOS_SDK.Others.Common._EOS_EApplicationStatus_ToString
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_EApplicationStatus_ToString(int32_t applicationStatus);

// Computed from EOS_SDK.Others.Common._EOS_ENetworkStatus_ToString
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_ENetworkStatus_ToString(int32_t networkStatus);

// Computed from EOS_SDK.Others.Common._EOS_EResult_IsOperationComplete
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_EResult_IsOperationComplete(int32_t result);

// Computed from EOS_SDK.Others.Common._EOS_EResult_ToString
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_EResult_ToString(int32_t result);

// Computed from EOS_SDK.Others.Common._EOS_Initialize
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Initialize(intptr_t options);

// Computed from EOS_SDK.Others.Common._EOS_Shutdown
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Shutdown(void);

// Computed from EOS_SDK.Others.EpicAccountId._EOS_EpicAccountId_FromString
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_EpicAccountId_FromString(intptr_t accountIdString);

// Computed from EOS_SDK.Others.EpicAccountId._EOS_EpicAccountId_IsValid
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_EpicAccountId_IsValid(intptr_t accountId);

// Computed from EOS_SDK.Others.EpicAccountId._EOS_EpicAccountId_ToString
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_EpicAccountId_ToString(intptr_t accountId, intptr_t outBuffer, int32_t inOutBufferLength);

// Computed from EOS_SDK.Others.ProductUserId._EOS_ProductUserId_FromString
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_ProductUserId_FromString(intptr_t productUserIdString);

// Computed from EOS_SDK.Others.ProductUserId._EOS_ProductUserId_IsValid
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ProductUserId_IsValid(intptr_t accountId);

// Computed from EOS_SDK.Others.ProductUserId._EOS_ProductUserId_ToString
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ProductUserId_ToString(intptr_t accountId, intptr_t outBuffer, int32_t inOutBufferLength);

// Computed from EOS_SDK.Version.Version_Exports._EOS_GetVersion
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_GetVersion(void);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_CheckForLauncherAndRestart
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_CheckForLauncherAndRestart(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_Create
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_Create(intptr_t options);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetAchievementsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetAchievementsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetActiveCountryCode
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetActiveCountryCode(intptr_t handle, intptr_t localUserId, intptr_t outBuffer, int32_t inOutBufferLength);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetActiveLocaleCode
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetActiveLocaleCode(intptr_t handle, intptr_t localUserId, intptr_t outBuffer, int32_t inOutBufferLength);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetAntiCheatClientInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetAntiCheatClientInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetAntiCheatServerInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetAntiCheatServerInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetApplicationStatus
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetApplicationStatus(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetAuthInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetAuthInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetConnectInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetConnectInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetCustomInvitesInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetCustomInvitesInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetDesktopCrossplayStatus
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetDesktopCrossplayStatus(intptr_t handle, intptr_t options, intptr_t outDesktopCrossplayStatusInfo);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetEcomInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetEcomInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetFriendsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetFriendsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetIntegratedPlatformInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetIntegratedPlatformInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetKWSInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetKWSInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetLeaderboardsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetLeaderboardsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetLobbyInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetLobbyInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetMetricsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetMetricsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetModsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetModsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetNetworkStatus
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetNetworkStatus(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetOverrideCountryCode
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetOverrideCountryCode(intptr_t handle, intptr_t outBuffer, int32_t inOutBufferLength);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetOverrideLocaleCode
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetOverrideLocaleCode(intptr_t handle, intptr_t outBuffer, int32_t inOutBufferLength);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetP2PInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetP2PInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetPlayerDataStorageInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetPlayerDataStorageInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetPresenceInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetPresenceInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetProgressionSnapshotInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetProgressionSnapshotInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetRTCAdminInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetRTCAdminInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetRTCInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetRTCInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetReportsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetReportsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetSanctionsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetSanctionsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetSessionsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetSessionsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetStatsInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetStatsInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetTitleStorageInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetTitleStorageInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetUIInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetUIInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetUserInfoInterface
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetUserInfoInterface(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Platform_Release(intptr_t handle);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_SetApplicationStatus
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_SetApplicationStatus(intptr_t handle, int32_t newStatus);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_SetNetworkStatus
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_SetNetworkStatus(intptr_t handle, int32_t newStatus);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_SetOverrideCountryCode
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_SetOverrideCountryCode(intptr_t handle, intptr_t newCountryCode);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_SetOverrideLocaleCode
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_SetOverrideLocaleCode(intptr_t handle, intptr_t newLocaleCode);

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_Tick
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Platform_Tick(intptr_t handle);

// Computed from EOS_SDK.Logging.Logging_Exports._EOS_Logging_SetCallback
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Logging_SetCallback(intptr_t callback);

// Computed from EOS_SDK.Logging.Logging_Exports._EOS_Logging_SetLogLevel
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Logging_SetLogLevel(int32_t logCategory, int32_t logLevel);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_AddNotifyAuthExpiration
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Connect_AddNotifyAuthExpiration(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_RemoveNotifyAuthExpiration
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_RemoveNotifyAuthExpiration(intptr_t handle, uint64_t inId);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_AddNotifyLoginStatusChanged
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Connect_AddNotifyLoginStatusChanged(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_RemoveNotifyLoginStatusChanged
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_RemoveNotifyLoginStatusChanged(intptr_t handle, uint64_t inId);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyIdToken
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyIdToken(intptr_t handle, intptr_t options, intptr_t outIdToken);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_IdToken_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_IdToken_Release(intptr_t idToken);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyProductUserExternalAccountByAccountId
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyProductUserExternalAccountByAccountId(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyProductUserExternalAccountByAccountType
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyProductUserExternalAccountByAccountType(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyProductUserExternalAccountByIndex
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyProductUserExternalAccountByIndex(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyProductUserInfo
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyProductUserInfo(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_ExternalAccountInfo_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_ExternalAccountInfo_Release(intptr_t externalAccountInfo);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CreateDeviceId
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_CreateDeviceId(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_DeleteDeviceId
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_DeleteDeviceId(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetExternalAccountMapping
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetExternalAccountMapping(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetLoggedInUserByIndex
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetLoggedInUserByIndex(intptr_t handle, int32_t index);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetLoggedInUsersCount
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetLoggedInUsersCount(intptr_t handle);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetLoginStatus
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetLoginStatus(intptr_t handle, intptr_t localUserId);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetProductUserExternalAccountCount
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetProductUserExternalAccountCount(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetProductUserIdMapping
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetProductUserIdMapping(intptr_t handle, intptr_t options, intptr_t outBuffer, int32_t inOutBufferLength);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_QueryExternalAccountMappings
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_QueryExternalAccountMappings(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_QueryProductUserIdMappings
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_QueryProductUserIdMappings(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_LinkAccount
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_LinkAccount(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_UnlinkAccount
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_UnlinkAccount(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CreateUser
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_CreateUser(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_Login
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_Login(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_TransferDeviceIdAccount
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_TransferDeviceIdAccount(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_VerifyIdToken
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_VerifyIdToken(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_AddNotifyLoginStatusChanged
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Auth_AddNotifyLoginStatusChanged(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_RemoveNotifyLoginStatusChanged
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_RemoveNotifyLoginStatusChanged(intptr_t handle, uint64_t inId);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_CopyIdToken
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_CopyIdToken(intptr_t handle, intptr_t options, intptr_t outIdToken);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_QueryIdToken
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_QueryIdToken(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_IdToken_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_IdToken_Release(intptr_t idToken);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_CopyUserAuthToken
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_CopyUserAuthToken(intptr_t handle, intptr_t options, intptr_t localUserId, intptr_t outUserAuthToken);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_Token_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_Token_Release(intptr_t authToken);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetLoggedInAccountByIndex
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetLoggedInAccountByIndex(intptr_t handle, int32_t index);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetLoggedInAccountsCount
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetLoggedInAccountsCount(intptr_t handle);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetMergedAccountByIndex
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetMergedAccountByIndex(intptr_t handle, intptr_t localUserId, uint32_t index);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetMergedAccountsCount
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetMergedAccountsCount(intptr_t handle, intptr_t localUserId);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_LinkAccount
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_LinkAccount(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_Login
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_Login(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_Logout
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_Logout(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_VerifyIdToken
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_VerifyIdToken(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_VerifyUserAuth
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_VerifyUserAuth(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetSelectedAccountId
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetSelectedAccountId(intptr_t handle, intptr_t localUserId, intptr_t outSelectedAccountId);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetLoginStatus
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetLoginStatus(intptr_t handle, intptr_t localUserId);

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_DeletePersistentAuth
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_DeletePersistentAuth(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_AddNotifyClientActionRequired
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_AddNotifyClientActionRequired(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_AddNotifyMessageToClient
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_AddNotifyMessageToClient(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_BeginSession
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_BeginSession(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_EndSession
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_EndSession(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_GetProtectMessageOutputLength
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_GetProtectMessageOutputLength(intptr_t handle, intptr_t options, uint32_t outBufferSizeBytes);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogEvent
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogEvent(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogGameRoundEnd
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogGameRoundEnd(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogGameRoundStart
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogGameRoundStart(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerDespawn
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerDespawn(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerRevive
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerRevive(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerSpawn
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerSpawn(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerTakeDamage
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerTakeDamage(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerTick
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerTick(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerUseAbility
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerUseAbility(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerUseWeapon
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerUseWeapon(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_ProtectMessage
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_ProtectMessage(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_ReceiveMessageFromClient
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_ReceiveMessageFromClient(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RegisterClient
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RegisterClient(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RegisterEvent
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RegisterEvent(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RemoveNotifyClientActionRequired
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RemoveNotifyClientActionRequired(intptr_t handle, uint64_t notificationId);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged(intptr_t handle, uint64_t notificationId);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RemoveNotifyMessageToClient
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RemoveNotifyMessageToClient(intptr_t handle, uint64_t notificationId);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_SetClientDetails
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_SetClientDetails(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_SetClientNetworkState
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_SetClientNetworkState(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_SetGameSessionId
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_SetGameSessionId(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_UnprotectMessage
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_UnprotectMessage(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten);

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_UnregisterClient
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_UnregisterClient(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddExternalIntegrityCatalog
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddExternalIntegrityCatalog(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyClientIntegrityViolated
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyClientIntegrityViolated(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyMessageToPeer
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyMessageToPeer(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyMessageToServer
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyMessageToServer(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyPeerActionRequired
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyPeerActionRequired(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_BeginSession
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_BeginSession(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_EndSession
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_EndSession(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_GetProtectMessageOutputLength
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_GetProtectMessageOutputLength(intptr_t handle, intptr_t options, uint32_t outBufferSizeBytes);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_PollStatus
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_PollStatus(intptr_t handle, intptr_t options, int32_t outViolationType, intptr_t outMessage);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_ProtectMessage
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_ProtectMessage(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_ReceiveMessageFromPeer
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_ReceiveMessageFromPeer(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_ReceiveMessageFromServer
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_ReceiveMessageFromServer(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RegisterPeer
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RegisterPeer(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated(intptr_t handle, uint64_t notificationId);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyMessageToPeer
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyMessageToPeer(intptr_t handle, uint64_t notificationId);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyMessageToServer
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyMessageToServer(intptr_t handle, uint64_t notificationId);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyPeerActionRequired
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyPeerActionRequired(intptr_t handle, uint64_t notificationId);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged(intptr_t handle, uint64_t notificationId);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_UnprotectMessage
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_UnprotectMessage(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten);

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_UnregisterPeer
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_UnregisterPeer(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_CopyInfo
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_CopyInfo(intptr_t handle, intptr_t options, intptr_t outActiveSessionInfo);

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_GetRegisteredPlayerByIndex
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_GetRegisteredPlayerByIndex(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_GetRegisteredPlayerCount
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_GetRegisteredPlayerCount(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_Info_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_Info_Release(intptr_t activeSessionInfo);

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_Release(intptr_t activeSessionHandle);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_AddNotifyAchievementsUnlocked
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_AddNotifyAchievementsUnlocked(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_AddNotifyAchievementsUnlockedV2
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_AddNotifyAchievementsUnlockedV2(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_RemoveNotifyAchievementsUnlocked
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_RemoveNotifyAchievementsUnlocked(intptr_t handle, uint64_t inId);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyAchievementDefinitionByAchievementId
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyAchievementDefinitionByAchievementId(intptr_t handle, intptr_t options, intptr_t outDefinition);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyAchievementDefinitionByIndex
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyAchievementDefinitionByIndex(intptr_t handle, intptr_t options, intptr_t outDefinition);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_Definition_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_Definition_Release(intptr_t achievementDefinition);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId(intptr_t handle, intptr_t options, intptr_t outDefinition);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyAchievementDefinitionV2ByIndex
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyAchievementDefinitionV2ByIndex(intptr_t handle, intptr_t options, intptr_t outDefinition);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_DefinitionV2_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_DefinitionV2_Release(intptr_t achievementDefinition);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyPlayerAchievementByAchievementId
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyPlayerAchievementByAchievementId(intptr_t handle, intptr_t options, intptr_t outAchievement);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyPlayerAchievementByIndex
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyPlayerAchievementByIndex(intptr_t handle, intptr_t options, intptr_t outAchievement);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_PlayerAchievement_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_PlayerAchievement_Release(intptr_t achievement);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_GetAchievementDefinitionCount
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_GetAchievementDefinitionCount(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_GetPlayerAchievementCount
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_GetPlayerAchievementCount(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_GetUnlockedAchievementCount
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_GetUnlockedAchievementCount(intptr_t handle, intptr_t options);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_QueryDefinitions
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_QueryDefinitions(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_QueryPlayerAchievements
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_QueryPlayerAchievements(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_UnlockAchievements
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_UnlockAchievements(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyUnlockedAchievementByAchievementId
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyUnlockedAchievementByAchievementId(intptr_t handle, intptr_t options, intptr_t outAchievement);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyUnlockedAchievementByIndex
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyUnlockedAchievementByIndex(intptr_t handle, intptr_t options, intptr_t outAchievement);

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_UnlockedAchievement_Release
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_UnlockedAchievement_Release(intptr_t achievement);

#endif // __DNNE_GENERATED_HEADER_LIBEOSSDK_MAC_SHIPPING_CS__

//
// Define exported functions
//
#ifdef DNNE_COMPILE_AS_SOURCE

#ifdef DNNE_WINDOWS
    #ifdef _WCHAR_T_DEFINED
        typedef wchar_t char_t;
    #else
        typedef unsigned short char_t;
    #endif
#else
    typedef char char_t;
#endif

//
// Forward declarations
//

extern void* get_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method,
    const char_t* dotnet_delegate_type);

extern void* get_fast_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method);

//
// String constants
//

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t1_name = DNNE_STR("EOS_SDK._test.test_exports");
#else
    static const char_t* t1_name = DNNE_STR("EOS_SDK._test.test_exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t2_name = DNNE_STR("EOS_SDK.Others.Common");
#else
    static const char_t* t2_name = DNNE_STR("EOS_SDK.Others.Common, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t3_name = DNNE_STR("EOS_SDK.Others.EpicAccountId");
#else
    static const char_t* t3_name = DNNE_STR("EOS_SDK.Others.EpicAccountId, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t4_name = DNNE_STR("EOS_SDK.Others.ProductUserId");
#else
    static const char_t* t4_name = DNNE_STR("EOS_SDK.Others.ProductUserId, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t5_name = DNNE_STR("EOS_SDK.Version.Version_Exports");
#else
    static const char_t* t5_name = DNNE_STR("EOS_SDK.Version.Version_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t6_name = DNNE_STR("EOS_SDK.Platform.Platform_Exports");
#else
    static const char_t* t6_name = DNNE_STR("EOS_SDK.Platform.Platform_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t7_name = DNNE_STR("EOS_SDK.Logging.Logging_Exports");
#else
    static const char_t* t7_name = DNNE_STR("EOS_SDK.Logging.Logging_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t8_name = DNNE_STR("EOS_SDK.Connect.Connect_Exports");
#else
    static const char_t* t8_name = DNNE_STR("EOS_SDK.Connect.Connect_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t9_name = DNNE_STR("EOS_SDK.Auth.Auth_Exports");
#else
    static const char_t* t9_name = DNNE_STR("EOS_SDK.Auth.Auth_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t10_name = DNNE_STR("EOS_SDK.AntiCheatServer.AntiCheatServer_Exports");
#else
    static const char_t* t10_name = DNNE_STR("EOS_SDK.AntiCheatServer.AntiCheatServer_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t11_name = DNNE_STR("EOS_SDK.AntiCheatClient.AntiCheatClient_Exports");
#else
    static const char_t* t11_name = DNNE_STR("EOS_SDK.AntiCheatClient.AntiCheatClient_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t12_name = DNNE_STR("EOS_SDK.ActiveSession.ActiveSession_Exports");
#else
    static const char_t* t12_name = DNNE_STR("EOS_SDK.ActiveSession.ActiveSession_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK

#ifdef DNNE_TARGET_NET_FRAMEWORK
    static const char_t* t13_name = DNNE_STR("EOS_SDK.Achievements.Achievements_Exports");
#else
    static const char_t* t13_name = DNNE_STR("EOS_SDK.Achievements.Achievements_Exports, libEOSSDK-Mac-Shipping_cs");
#endif // !DNNE_TARGET_NET_FRAMEWORK


//
// Exports
//

// Computed from EOS_SDK._test.test_exports._TESTAddNotify
static uint64_t (DNNE_CALLTYPE_STDCALL* _TESTAddNotify_ptr)(int32_t number, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _TESTAddNotify(int32_t number, intptr_t completionDelegate)
{
    if (_TESTAddNotify_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_TESTAddNotify");
        _TESTAddNotify_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(int32_t number, intptr_t completionDelegate))get_fast_callable_managed_function(t1_name, methodName);
    }
    return _TESTAddNotify_ptr(number, completionDelegate);
}

// Computed from EOS_SDK._test.test_exports._TESTRemoveNotify
static void (DNNE_CALLTYPE_STDCALL* _TESTRemoveNotify_ptr)(uint64_t id);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _TESTRemoveNotify(uint64_t id)
{
    if (_TESTRemoveNotify_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_TESTRemoveNotify");
        _TESTRemoveNotify_ptr = (void(DNNE_CALLTYPE_STDCALL*)(uint64_t id))get_fast_callable_managed_function(t1_name, methodName);
    }
    _TESTRemoveNotify_ptr(id);
}

// Computed from EOS_SDK._test.test_exports._TESTTriggerNotify
static void (DNNE_CALLTYPE_STDCALL* _TESTTriggerNotify_ptr)(intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _TESTTriggerNotify(intptr_t completionDelegate)
{
    if (_TESTTriggerNotify_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_TESTTriggerNotify");
        _TESTTriggerNotify_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t completionDelegate))get_fast_callable_managed_function(t1_name, methodName);
    }
    _TESTTriggerNotify_ptr(completionDelegate);
}

// Computed from EOS_SDK.Others.Common._EOS_ByteArray_ToString
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_ByteArray_ToString_ptr)(intptr_t byteArray, uint32_t length, intptr_t outBuffer, uint32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ByteArray_ToString(intptr_t byteArray, uint32_t length, intptr_t outBuffer, uint32_t inOutBufferLength)
{
    if (_EOS_ByteArray_ToString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ByteArray_ToString");
        _EOS_ByteArray_ToString_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t byteArray, uint32_t length, intptr_t outBuffer, uint32_t inOutBufferLength))get_fast_callable_managed_function(t2_name, methodName);
    }
    return _EOS_ByteArray_ToString_ptr(byteArray, length, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Others.Common._EOS_ContinuanceToken_ToString
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_ContinuanceToken_ToString_ptr)(intptr_t continuanceToken, intptr_t outBuffer, int32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ContinuanceToken_ToString(intptr_t continuanceToken, intptr_t outBuffer, int32_t inOutBufferLength)
{
    if (_EOS_ContinuanceToken_ToString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ContinuanceToken_ToString");
        _EOS_ContinuanceToken_ToString_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t continuanceToken, intptr_t outBuffer, int32_t inOutBufferLength))get_fast_callable_managed_function(t2_name, methodName);
    }
    return _EOS_ContinuanceToken_ToString_ptr(continuanceToken, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Others.Common._EOS_EApplicationStatus_ToString
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_EApplicationStatus_ToString_ptr)(int32_t applicationStatus);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_EApplicationStatus_ToString(int32_t applicationStatus)
{
    if (_EOS_EApplicationStatus_ToString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_EApplicationStatus_ToString");
        _EOS_EApplicationStatus_ToString_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(int32_t applicationStatus))get_fast_callable_managed_function(t2_name, methodName);
    }
    return _EOS_EApplicationStatus_ToString_ptr(applicationStatus);
}

// Computed from EOS_SDK.Others.Common._EOS_ENetworkStatus_ToString
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_ENetworkStatus_ToString_ptr)(int32_t networkStatus);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_ENetworkStatus_ToString(int32_t networkStatus)
{
    if (_EOS_ENetworkStatus_ToString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ENetworkStatus_ToString");
        _EOS_ENetworkStatus_ToString_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(int32_t networkStatus))get_fast_callable_managed_function(t2_name, methodName);
    }
    return _EOS_ENetworkStatus_ToString_ptr(networkStatus);
}

// Computed from EOS_SDK.Others.Common._EOS_EResult_IsOperationComplete
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_EResult_IsOperationComplete_ptr)(int32_t result);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_EResult_IsOperationComplete(int32_t result)
{
    if (_EOS_EResult_IsOperationComplete_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_EResult_IsOperationComplete");
        _EOS_EResult_IsOperationComplete_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(int32_t result))get_fast_callable_managed_function(t2_name, methodName);
    }
    return _EOS_EResult_IsOperationComplete_ptr(result);
}

// Computed from EOS_SDK.Others.Common._EOS_EResult_ToString
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_EResult_ToString_ptr)(int32_t result);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_EResult_ToString(int32_t result)
{
    if (_EOS_EResult_ToString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_EResult_ToString");
        _EOS_EResult_ToString_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(int32_t result))get_fast_callable_managed_function(t2_name, methodName);
    }
    return _EOS_EResult_ToString_ptr(result);
}

// Computed from EOS_SDK.Others.Common._EOS_Initialize
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Initialize_ptr)(intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Initialize(intptr_t options)
{
    if (_EOS_Initialize_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Initialize");
        _EOS_Initialize_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t options))get_fast_callable_managed_function(t2_name, methodName);
    }
    return _EOS_Initialize_ptr(options);
}

// Computed from EOS_SDK.Others.Common._EOS_Shutdown
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Shutdown_ptr)(void);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Shutdown(void)
{
    if (_EOS_Shutdown_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Shutdown");
        _EOS_Shutdown_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(void))get_fast_callable_managed_function(t2_name, methodName);
    }
    return _EOS_Shutdown_ptr();
}

// Computed from EOS_SDK.Others.EpicAccountId._EOS_EpicAccountId_FromString
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_EpicAccountId_FromString_ptr)(intptr_t accountIdString);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_EpicAccountId_FromString(intptr_t accountIdString)
{
    if (_EOS_EpicAccountId_FromString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_EpicAccountId_FromString");
        _EOS_EpicAccountId_FromString_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t accountIdString))get_fast_callable_managed_function(t3_name, methodName);
    }
    return _EOS_EpicAccountId_FromString_ptr(accountIdString);
}

// Computed from EOS_SDK.Others.EpicAccountId._EOS_EpicAccountId_IsValid
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_EpicAccountId_IsValid_ptr)(intptr_t accountId);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_EpicAccountId_IsValid(intptr_t accountId)
{
    if (_EOS_EpicAccountId_IsValid_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_EpicAccountId_IsValid");
        _EOS_EpicAccountId_IsValid_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t accountId))get_fast_callable_managed_function(t3_name, methodName);
    }
    return _EOS_EpicAccountId_IsValid_ptr(accountId);
}

// Computed from EOS_SDK.Others.EpicAccountId._EOS_EpicAccountId_ToString
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_EpicAccountId_ToString_ptr)(intptr_t accountId, intptr_t outBuffer, int32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_EpicAccountId_ToString(intptr_t accountId, intptr_t outBuffer, int32_t inOutBufferLength)
{
    if (_EOS_EpicAccountId_ToString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_EpicAccountId_ToString");
        _EOS_EpicAccountId_ToString_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t accountId, intptr_t outBuffer, int32_t inOutBufferLength))get_fast_callable_managed_function(t3_name, methodName);
    }
    return _EOS_EpicAccountId_ToString_ptr(accountId, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Others.ProductUserId._EOS_ProductUserId_FromString
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_ProductUserId_FromString_ptr)(intptr_t productUserIdString);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_ProductUserId_FromString(intptr_t productUserIdString)
{
    if (_EOS_ProductUserId_FromString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ProductUserId_FromString");
        _EOS_ProductUserId_FromString_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t productUserIdString))get_fast_callable_managed_function(t4_name, methodName);
    }
    return _EOS_ProductUserId_FromString_ptr(productUserIdString);
}

// Computed from EOS_SDK.Others.ProductUserId._EOS_ProductUserId_IsValid
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_ProductUserId_IsValid_ptr)(intptr_t accountId);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ProductUserId_IsValid(intptr_t accountId)
{
    if (_EOS_ProductUserId_IsValid_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ProductUserId_IsValid");
        _EOS_ProductUserId_IsValid_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t accountId))get_fast_callable_managed_function(t4_name, methodName);
    }
    return _EOS_ProductUserId_IsValid_ptr(accountId);
}

// Computed from EOS_SDK.Others.ProductUserId._EOS_ProductUserId_ToString
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_ProductUserId_ToString_ptr)(intptr_t accountId, intptr_t outBuffer, int32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ProductUserId_ToString(intptr_t accountId, intptr_t outBuffer, int32_t inOutBufferLength)
{
    if (_EOS_ProductUserId_ToString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ProductUserId_ToString");
        _EOS_ProductUserId_ToString_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t accountId, intptr_t outBuffer, int32_t inOutBufferLength))get_fast_callable_managed_function(t4_name, methodName);
    }
    return _EOS_ProductUserId_ToString_ptr(accountId, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Version.Version_Exports._EOS_GetVersion
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_GetVersion_ptr)(void);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_GetVersion(void)
{
    if (_EOS_GetVersion_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_GetVersion");
        _EOS_GetVersion_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(void))get_fast_callable_managed_function(t5_name, methodName);
    }
    return _EOS_GetVersion_ptr();
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_CheckForLauncherAndRestart
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_CheckForLauncherAndRestart_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_CheckForLauncherAndRestart(intptr_t handle)
{
    if (_EOS_Platform_CheckForLauncherAndRestart_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_CheckForLauncherAndRestart");
        _EOS_Platform_CheckForLauncherAndRestart_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_CheckForLauncherAndRestart_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_Create
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_Create_ptr)(intptr_t options);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_Create(intptr_t options)
{
    if (_EOS_Platform_Create_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_Create");
        _EOS_Platform_Create_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t options))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_Create_ptr(options);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetAchievementsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetAchievementsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetAchievementsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetAchievementsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetAchievementsInterface");
        _EOS_Platform_GetAchievementsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetAchievementsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetActiveCountryCode
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetActiveCountryCode_ptr)(intptr_t handle, intptr_t localUserId, intptr_t outBuffer, int32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetActiveCountryCode(intptr_t handle, intptr_t localUserId, intptr_t outBuffer, int32_t inOutBufferLength)
{
    if (_EOS_Platform_GetActiveCountryCode_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetActiveCountryCode");
        _EOS_Platform_GetActiveCountryCode_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t localUserId, intptr_t outBuffer, int32_t inOutBufferLength))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetActiveCountryCode_ptr(handle, localUserId, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetActiveLocaleCode
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetActiveLocaleCode_ptr)(intptr_t handle, intptr_t localUserId, intptr_t outBuffer, int32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetActiveLocaleCode(intptr_t handle, intptr_t localUserId, intptr_t outBuffer, int32_t inOutBufferLength)
{
    if (_EOS_Platform_GetActiveLocaleCode_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetActiveLocaleCode");
        _EOS_Platform_GetActiveLocaleCode_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t localUserId, intptr_t outBuffer, int32_t inOutBufferLength))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetActiveLocaleCode_ptr(handle, localUserId, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetAntiCheatClientInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetAntiCheatClientInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetAntiCheatClientInterface(intptr_t handle)
{
    if (_EOS_Platform_GetAntiCheatClientInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetAntiCheatClientInterface");
        _EOS_Platform_GetAntiCheatClientInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetAntiCheatClientInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetAntiCheatServerInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetAntiCheatServerInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetAntiCheatServerInterface(intptr_t handle)
{
    if (_EOS_Platform_GetAntiCheatServerInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetAntiCheatServerInterface");
        _EOS_Platform_GetAntiCheatServerInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetAntiCheatServerInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetApplicationStatus
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetApplicationStatus_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetApplicationStatus(intptr_t handle)
{
    if (_EOS_Platform_GetApplicationStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetApplicationStatus");
        _EOS_Platform_GetApplicationStatus_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetApplicationStatus_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetAuthInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetAuthInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetAuthInterface(intptr_t handle)
{
    if (_EOS_Platform_GetAuthInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetAuthInterface");
        _EOS_Platform_GetAuthInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetAuthInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetConnectInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetConnectInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetConnectInterface(intptr_t handle)
{
    if (_EOS_Platform_GetConnectInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetConnectInterface");
        _EOS_Platform_GetConnectInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetConnectInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetCustomInvitesInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetCustomInvitesInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetCustomInvitesInterface(intptr_t handle)
{
    if (_EOS_Platform_GetCustomInvitesInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetCustomInvitesInterface");
        _EOS_Platform_GetCustomInvitesInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetCustomInvitesInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetDesktopCrossplayStatus
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetDesktopCrossplayStatus_ptr)(intptr_t handle, intptr_t options, intptr_t outDesktopCrossplayStatusInfo);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetDesktopCrossplayStatus(intptr_t handle, intptr_t options, intptr_t outDesktopCrossplayStatusInfo)
{
    if (_EOS_Platform_GetDesktopCrossplayStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetDesktopCrossplayStatus");
        _EOS_Platform_GetDesktopCrossplayStatus_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outDesktopCrossplayStatusInfo))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetDesktopCrossplayStatus_ptr(handle, options, outDesktopCrossplayStatusInfo);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetEcomInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetEcomInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetEcomInterface(intptr_t handle)
{
    if (_EOS_Platform_GetEcomInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetEcomInterface");
        _EOS_Platform_GetEcomInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetEcomInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetFriendsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetFriendsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetFriendsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetFriendsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetFriendsInterface");
        _EOS_Platform_GetFriendsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetFriendsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetIntegratedPlatformInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetIntegratedPlatformInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetIntegratedPlatformInterface(intptr_t handle)
{
    if (_EOS_Platform_GetIntegratedPlatformInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetIntegratedPlatformInterface");
        _EOS_Platform_GetIntegratedPlatformInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetIntegratedPlatformInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetKWSInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetKWSInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetKWSInterface(intptr_t handle)
{
    if (_EOS_Platform_GetKWSInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetKWSInterface");
        _EOS_Platform_GetKWSInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetKWSInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetLeaderboardsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetLeaderboardsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetLeaderboardsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetLeaderboardsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetLeaderboardsInterface");
        _EOS_Platform_GetLeaderboardsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetLeaderboardsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetLobbyInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetLobbyInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetLobbyInterface(intptr_t handle)
{
    if (_EOS_Platform_GetLobbyInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetLobbyInterface");
        _EOS_Platform_GetLobbyInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetLobbyInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetMetricsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetMetricsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetMetricsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetMetricsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetMetricsInterface");
        _EOS_Platform_GetMetricsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetMetricsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetModsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetModsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetModsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetModsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetModsInterface");
        _EOS_Platform_GetModsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetModsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetNetworkStatus
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetNetworkStatus_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetNetworkStatus(intptr_t handle)
{
    if (_EOS_Platform_GetNetworkStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetNetworkStatus");
        _EOS_Platform_GetNetworkStatus_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetNetworkStatus_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetOverrideCountryCode
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetOverrideCountryCode_ptr)(intptr_t handle, intptr_t outBuffer, int32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetOverrideCountryCode(intptr_t handle, intptr_t outBuffer, int32_t inOutBufferLength)
{
    if (_EOS_Platform_GetOverrideCountryCode_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetOverrideCountryCode");
        _EOS_Platform_GetOverrideCountryCode_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t outBuffer, int32_t inOutBufferLength))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetOverrideCountryCode_ptr(handle, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetOverrideLocaleCode
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetOverrideLocaleCode_ptr)(intptr_t handle, intptr_t outBuffer, int32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetOverrideLocaleCode(intptr_t handle, intptr_t outBuffer, int32_t inOutBufferLength)
{
    if (_EOS_Platform_GetOverrideLocaleCode_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetOverrideLocaleCode");
        _EOS_Platform_GetOverrideLocaleCode_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t outBuffer, int32_t inOutBufferLength))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetOverrideLocaleCode_ptr(handle, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetP2PInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetP2PInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetP2PInterface(intptr_t handle)
{
    if (_EOS_Platform_GetP2PInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetP2PInterface");
        _EOS_Platform_GetP2PInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetP2PInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetPlayerDataStorageInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetPlayerDataStorageInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetPlayerDataStorageInterface(intptr_t handle)
{
    if (_EOS_Platform_GetPlayerDataStorageInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetPlayerDataStorageInterface");
        _EOS_Platform_GetPlayerDataStorageInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetPlayerDataStorageInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetPresenceInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetPresenceInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetPresenceInterface(intptr_t handle)
{
    if (_EOS_Platform_GetPresenceInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetPresenceInterface");
        _EOS_Platform_GetPresenceInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetPresenceInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetProgressionSnapshotInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetProgressionSnapshotInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetProgressionSnapshotInterface(intptr_t handle)
{
    if (_EOS_Platform_GetProgressionSnapshotInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetProgressionSnapshotInterface");
        _EOS_Platform_GetProgressionSnapshotInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetProgressionSnapshotInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetRTCAdminInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetRTCAdminInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetRTCAdminInterface(intptr_t handle)
{
    if (_EOS_Platform_GetRTCAdminInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetRTCAdminInterface");
        _EOS_Platform_GetRTCAdminInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetRTCAdminInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetRTCInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetRTCInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetRTCInterface(intptr_t handle)
{
    if (_EOS_Platform_GetRTCInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetRTCInterface");
        _EOS_Platform_GetRTCInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetRTCInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetReportsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetReportsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetReportsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetReportsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetReportsInterface");
        _EOS_Platform_GetReportsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetReportsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetSanctionsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetSanctionsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetSanctionsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetSanctionsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetSanctionsInterface");
        _EOS_Platform_GetSanctionsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetSanctionsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetSessionsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetSessionsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetSessionsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetSessionsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetSessionsInterface");
        _EOS_Platform_GetSessionsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetSessionsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetStatsInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetStatsInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetStatsInterface(intptr_t handle)
{
    if (_EOS_Platform_GetStatsInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetStatsInterface");
        _EOS_Platform_GetStatsInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetStatsInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetTitleStorageInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetTitleStorageInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetTitleStorageInterface(intptr_t handle)
{
    if (_EOS_Platform_GetTitleStorageInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetTitleStorageInterface");
        _EOS_Platform_GetTitleStorageInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetTitleStorageInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetUIInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetUIInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetUIInterface(intptr_t handle)
{
    if (_EOS_Platform_GetUIInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetUIInterface");
        _EOS_Platform_GetUIInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetUIInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_GetUserInfoInterface
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_GetUserInfoInterface_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Platform_GetUserInfoInterface(intptr_t handle)
{
    if (_EOS_Platform_GetUserInfoInterface_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_GetUserInfoInterface");
        _EOS_Platform_GetUserInfoInterface_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_GetUserInfoInterface_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Platform_Release_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Platform_Release(intptr_t handle)
{
    if (_EOS_Platform_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_Release");
        _EOS_Platform_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    _EOS_Platform_Release_ptr(handle);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_SetApplicationStatus
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_SetApplicationStatus_ptr)(intptr_t handle, int32_t newStatus);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_SetApplicationStatus(intptr_t handle, int32_t newStatus)
{
    if (_EOS_Platform_SetApplicationStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_SetApplicationStatus");
        _EOS_Platform_SetApplicationStatus_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, int32_t newStatus))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_SetApplicationStatus_ptr(handle, newStatus);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_SetNetworkStatus
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_SetNetworkStatus_ptr)(intptr_t handle, int32_t newStatus);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_SetNetworkStatus(intptr_t handle, int32_t newStatus)
{
    if (_EOS_Platform_SetNetworkStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_SetNetworkStatus");
        _EOS_Platform_SetNetworkStatus_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, int32_t newStatus))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_SetNetworkStatus_ptr(handle, newStatus);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_SetOverrideCountryCode
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_SetOverrideCountryCode_ptr)(intptr_t handle, intptr_t newCountryCode);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_SetOverrideCountryCode(intptr_t handle, intptr_t newCountryCode)
{
    if (_EOS_Platform_SetOverrideCountryCode_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_SetOverrideCountryCode");
        _EOS_Platform_SetOverrideCountryCode_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t newCountryCode))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_SetOverrideCountryCode_ptr(handle, newCountryCode);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_SetOverrideLocaleCode
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Platform_SetOverrideLocaleCode_ptr)(intptr_t handle, intptr_t newLocaleCode);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Platform_SetOverrideLocaleCode(intptr_t handle, intptr_t newLocaleCode)
{
    if (_EOS_Platform_SetOverrideLocaleCode_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_SetOverrideLocaleCode");
        _EOS_Platform_SetOverrideLocaleCode_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t newLocaleCode))get_fast_callable_managed_function(t6_name, methodName);
    }
    return _EOS_Platform_SetOverrideLocaleCode_ptr(handle, newLocaleCode);
}

// Computed from EOS_SDK.Platform.Platform_Exports._EOS_Platform_Tick
static void (DNNE_CALLTYPE_STDCALL* _EOS_Platform_Tick_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Platform_Tick(intptr_t handle)
{
    if (_EOS_Platform_Tick_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Platform_Tick");
        _EOS_Platform_Tick_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t6_name, methodName);
    }
    _EOS_Platform_Tick_ptr(handle);
}

// Computed from EOS_SDK.Logging.Logging_Exports._EOS_Logging_SetCallback
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Logging_SetCallback_ptr)(intptr_t callback);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Logging_SetCallback(intptr_t callback)
{
    if (_EOS_Logging_SetCallback_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Logging_SetCallback");
        _EOS_Logging_SetCallback_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t callback))get_fast_callable_managed_function(t7_name, methodName);
    }
    return _EOS_Logging_SetCallback_ptr(callback);
}

// Computed from EOS_SDK.Logging.Logging_Exports._EOS_Logging_SetLogLevel
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Logging_SetLogLevel_ptr)(int32_t logCategory, int32_t logLevel);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Logging_SetLogLevel(int32_t logCategory, int32_t logLevel)
{
    if (_EOS_Logging_SetLogLevel_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Logging_SetLogLevel");
        _EOS_Logging_SetLogLevel_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(int32_t logCategory, int32_t logLevel))get_fast_callable_managed_function(t7_name, methodName);
    }
    return _EOS_Logging_SetLogLevel_ptr(logCategory, logLevel);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_AddNotifyAuthExpiration
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_AddNotifyAuthExpiration_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Connect_AddNotifyAuthExpiration(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification)
{
    if (_EOS_Connect_AddNotifyAuthExpiration_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_AddNotifyAuthExpiration");
        _EOS_Connect_AddNotifyAuthExpiration_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_AddNotifyAuthExpiration_ptr(handle, options, clientData, notification);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_RemoveNotifyAuthExpiration
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_RemoveNotifyAuthExpiration_ptr)(intptr_t handle, uint64_t inId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_RemoveNotifyAuthExpiration(intptr_t handle, uint64_t inId)
{
    if (_EOS_Connect_RemoveNotifyAuthExpiration_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_RemoveNotifyAuthExpiration");
        _EOS_Connect_RemoveNotifyAuthExpiration_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t inId))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_RemoveNotifyAuthExpiration_ptr(handle, inId);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_AddNotifyLoginStatusChanged
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_AddNotifyLoginStatusChanged_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Connect_AddNotifyLoginStatusChanged(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification)
{
    if (_EOS_Connect_AddNotifyLoginStatusChanged_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_AddNotifyLoginStatusChanged");
        _EOS_Connect_AddNotifyLoginStatusChanged_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_AddNotifyLoginStatusChanged_ptr(handle, options, clientData, notification);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_RemoveNotifyLoginStatusChanged
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_RemoveNotifyLoginStatusChanged_ptr)(intptr_t handle, uint64_t inId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_RemoveNotifyLoginStatusChanged(intptr_t handle, uint64_t inId)
{
    if (_EOS_Connect_RemoveNotifyLoginStatusChanged_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_RemoveNotifyLoginStatusChanged");
        _EOS_Connect_RemoveNotifyLoginStatusChanged_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t inId))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_RemoveNotifyLoginStatusChanged_ptr(handle, inId);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyIdToken
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_CopyIdToken_ptr)(intptr_t handle, intptr_t options, intptr_t outIdToken);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyIdToken(intptr_t handle, intptr_t options, intptr_t outIdToken)
{
    if (_EOS_Connect_CopyIdToken_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_CopyIdToken");
        _EOS_Connect_CopyIdToken_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outIdToken))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_CopyIdToken_ptr(handle, options, outIdToken);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_IdToken_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_IdToken_Release_ptr)(intptr_t idToken);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_IdToken_Release(intptr_t idToken)
{
    if (_EOS_Connect_IdToken_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_IdToken_Release");
        _EOS_Connect_IdToken_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t idToken))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_IdToken_Release_ptr(idToken);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyProductUserExternalAccountByAccountId
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_CopyProductUserExternalAccountByAccountId_ptr)(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyProductUserExternalAccountByAccountId(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo)
{
    if (_EOS_Connect_CopyProductUserExternalAccountByAccountId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_CopyProductUserExternalAccountByAccountId");
        _EOS_Connect_CopyProductUserExternalAccountByAccountId_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_CopyProductUserExternalAccountByAccountId_ptr(handle, options, outExternalAccountInfo);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyProductUserExternalAccountByAccountType
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_CopyProductUserExternalAccountByAccountType_ptr)(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyProductUserExternalAccountByAccountType(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo)
{
    if (_EOS_Connect_CopyProductUserExternalAccountByAccountType_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_CopyProductUserExternalAccountByAccountType");
        _EOS_Connect_CopyProductUserExternalAccountByAccountType_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_CopyProductUserExternalAccountByAccountType_ptr(handle, options, outExternalAccountInfo);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyProductUserExternalAccountByIndex
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_CopyProductUserExternalAccountByIndex_ptr)(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyProductUserExternalAccountByIndex(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo)
{
    if (_EOS_Connect_CopyProductUserExternalAccountByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_CopyProductUserExternalAccountByIndex");
        _EOS_Connect_CopyProductUserExternalAccountByIndex_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_CopyProductUserExternalAccountByIndex_ptr(handle, options, outExternalAccountInfo);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CopyProductUserInfo
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_CopyProductUserInfo_ptr)(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_CopyProductUserInfo(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo)
{
    if (_EOS_Connect_CopyProductUserInfo_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_CopyProductUserInfo");
        _EOS_Connect_CopyProductUserInfo_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outExternalAccountInfo))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_CopyProductUserInfo_ptr(handle, options, outExternalAccountInfo);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_ExternalAccountInfo_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_ExternalAccountInfo_Release_ptr)(intptr_t externalAccountInfo);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_ExternalAccountInfo_Release(intptr_t externalAccountInfo)
{
    if (_EOS_Connect_ExternalAccountInfo_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_ExternalAccountInfo_Release");
        _EOS_Connect_ExternalAccountInfo_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t externalAccountInfo))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_ExternalAccountInfo_Release_ptr(externalAccountInfo);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CreateDeviceId
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_CreateDeviceId_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_CreateDeviceId(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_CreateDeviceId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_CreateDeviceId");
        _EOS_Connect_CreateDeviceId_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_CreateDeviceId_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_DeleteDeviceId
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_DeleteDeviceId_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_DeleteDeviceId(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_DeleteDeviceId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_DeleteDeviceId");
        _EOS_Connect_DeleteDeviceId_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_DeleteDeviceId_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetExternalAccountMapping
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_GetExternalAccountMapping_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetExternalAccountMapping(intptr_t handle, intptr_t options)
{
    if (_EOS_Connect_GetExternalAccountMapping_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_GetExternalAccountMapping");
        _EOS_Connect_GetExternalAccountMapping_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_GetExternalAccountMapping_ptr(handle, options);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetLoggedInUserByIndex
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_GetLoggedInUserByIndex_ptr)(intptr_t handle, int32_t index);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetLoggedInUserByIndex(intptr_t handle, int32_t index)
{
    if (_EOS_Connect_GetLoggedInUserByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_GetLoggedInUserByIndex");
        _EOS_Connect_GetLoggedInUserByIndex_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, int32_t index))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_GetLoggedInUserByIndex_ptr(handle, index);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetLoggedInUsersCount
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_GetLoggedInUsersCount_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetLoggedInUsersCount(intptr_t handle)
{
    if (_EOS_Connect_GetLoggedInUsersCount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_GetLoggedInUsersCount");
        _EOS_Connect_GetLoggedInUsersCount_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_GetLoggedInUsersCount_ptr(handle);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetLoginStatus
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_GetLoginStatus_ptr)(intptr_t handle, intptr_t localUserId);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetLoginStatus(intptr_t handle, intptr_t localUserId)
{
    if (_EOS_Connect_GetLoginStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_GetLoginStatus");
        _EOS_Connect_GetLoginStatus_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t localUserId))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_GetLoginStatus_ptr(handle, localUserId);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetProductUserExternalAccountCount
static uint32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_GetProductUserExternalAccountCount_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetProductUserExternalAccountCount(intptr_t handle, intptr_t options)
{
    if (_EOS_Connect_GetProductUserExternalAccountCount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_GetProductUserExternalAccountCount");
        _EOS_Connect_GetProductUserExternalAccountCount_ptr = (uint32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_GetProductUserExternalAccountCount_ptr(handle, options);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_GetProductUserIdMapping
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Connect_GetProductUserIdMapping_ptr)(intptr_t handle, intptr_t options, intptr_t outBuffer, int32_t inOutBufferLength);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Connect_GetProductUserIdMapping(intptr_t handle, intptr_t options, intptr_t outBuffer, int32_t inOutBufferLength)
{
    if (_EOS_Connect_GetProductUserIdMapping_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_GetProductUserIdMapping");
        _EOS_Connect_GetProductUserIdMapping_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outBuffer, int32_t inOutBufferLength))get_fast_callable_managed_function(t8_name, methodName);
    }
    return _EOS_Connect_GetProductUserIdMapping_ptr(handle, options, outBuffer, inOutBufferLength);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_QueryExternalAccountMappings
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_QueryExternalAccountMappings_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_QueryExternalAccountMappings(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_QueryExternalAccountMappings_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_QueryExternalAccountMappings");
        _EOS_Connect_QueryExternalAccountMappings_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_QueryExternalAccountMappings_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_QueryProductUserIdMappings
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_QueryProductUserIdMappings_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_QueryProductUserIdMappings(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_QueryProductUserIdMappings_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_QueryProductUserIdMappings");
        _EOS_Connect_QueryProductUserIdMappings_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_QueryProductUserIdMappings_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_LinkAccount
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_LinkAccount_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_LinkAccount(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_LinkAccount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_LinkAccount");
        _EOS_Connect_LinkAccount_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_LinkAccount_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_UnlinkAccount
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_UnlinkAccount_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_UnlinkAccount(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_UnlinkAccount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_UnlinkAccount");
        _EOS_Connect_UnlinkAccount_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_UnlinkAccount_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_CreateUser
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_CreateUser_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_CreateUser(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_CreateUser_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_CreateUser");
        _EOS_Connect_CreateUser_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_CreateUser_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_Login
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_Login_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_Login(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_Login_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_Login");
        _EOS_Connect_Login_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_Login_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_TransferDeviceIdAccount
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_TransferDeviceIdAccount_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_TransferDeviceIdAccount(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_TransferDeviceIdAccount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_TransferDeviceIdAccount");
        _EOS_Connect_TransferDeviceIdAccount_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_TransferDeviceIdAccount_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Connect.Connect_Exports._EOS_Connect_VerifyIdToken
static void (DNNE_CALLTYPE_STDCALL* _EOS_Connect_VerifyIdToken_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Connect_VerifyIdToken(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Connect_VerifyIdToken_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Connect_VerifyIdToken");
        _EOS_Connect_VerifyIdToken_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t8_name, methodName);
    }
    _EOS_Connect_VerifyIdToken_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_AddNotifyLoginStatusChanged
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_AddNotifyLoginStatusChanged_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Auth_AddNotifyLoginStatusChanged(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification)
{
    if (_EOS_Auth_AddNotifyLoginStatusChanged_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_AddNotifyLoginStatusChanged");
        _EOS_Auth_AddNotifyLoginStatusChanged_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notification))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_AddNotifyLoginStatusChanged_ptr(handle, options, clientData, notification);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_RemoveNotifyLoginStatusChanged
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_RemoveNotifyLoginStatusChanged_ptr)(intptr_t handle, uint64_t inId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_RemoveNotifyLoginStatusChanged(intptr_t handle, uint64_t inId)
{
    if (_EOS_Auth_RemoveNotifyLoginStatusChanged_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_RemoveNotifyLoginStatusChanged");
        _EOS_Auth_RemoveNotifyLoginStatusChanged_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t inId))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_RemoveNotifyLoginStatusChanged_ptr(handle, inId);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_CopyIdToken
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_CopyIdToken_ptr)(intptr_t handle, intptr_t options, intptr_t outIdToken);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_CopyIdToken(intptr_t handle, intptr_t options, intptr_t outIdToken)
{
    if (_EOS_Auth_CopyIdToken_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_CopyIdToken");
        _EOS_Auth_CopyIdToken_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outIdToken))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_CopyIdToken_ptr(handle, options, outIdToken);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_QueryIdToken
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_QueryIdToken_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_QueryIdToken(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Auth_QueryIdToken_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_QueryIdToken");
        _EOS_Auth_QueryIdToken_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_QueryIdToken_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_IdToken_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_IdToken_Release_ptr)(intptr_t idToken);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_IdToken_Release(intptr_t idToken)
{
    if (_EOS_Auth_IdToken_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_IdToken_Release");
        _EOS_Auth_IdToken_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t idToken))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_IdToken_Release_ptr(idToken);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_CopyUserAuthToken
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_CopyUserAuthToken_ptr)(intptr_t handle, intptr_t options, intptr_t localUserId, intptr_t outUserAuthToken);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_CopyUserAuthToken(intptr_t handle, intptr_t options, intptr_t localUserId, intptr_t outUserAuthToken)
{
    if (_EOS_Auth_CopyUserAuthToken_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_CopyUserAuthToken");
        _EOS_Auth_CopyUserAuthToken_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t localUserId, intptr_t outUserAuthToken))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_CopyUserAuthToken_ptr(handle, options, localUserId, outUserAuthToken);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_Token_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_Token_Release_ptr)(intptr_t authToken);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_Token_Release(intptr_t authToken)
{
    if (_EOS_Auth_Token_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_Token_Release");
        _EOS_Auth_Token_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t authToken))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_Token_Release_ptr(authToken);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetLoggedInAccountByIndex
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_GetLoggedInAccountByIndex_ptr)(intptr_t handle, int32_t index);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetLoggedInAccountByIndex(intptr_t handle, int32_t index)
{
    if (_EOS_Auth_GetLoggedInAccountByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_GetLoggedInAccountByIndex");
        _EOS_Auth_GetLoggedInAccountByIndex_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, int32_t index))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_GetLoggedInAccountByIndex_ptr(handle, index);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetLoggedInAccountsCount
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_GetLoggedInAccountsCount_ptr)(intptr_t handle);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetLoggedInAccountsCount(intptr_t handle)
{
    if (_EOS_Auth_GetLoggedInAccountsCount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_GetLoggedInAccountsCount");
        _EOS_Auth_GetLoggedInAccountsCount_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_GetLoggedInAccountsCount_ptr(handle);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetMergedAccountByIndex
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_GetMergedAccountByIndex_ptr)(intptr_t handle, intptr_t localUserId, uint32_t index);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetMergedAccountByIndex(intptr_t handle, intptr_t localUserId, uint32_t index)
{
    if (_EOS_Auth_GetMergedAccountByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_GetMergedAccountByIndex");
        _EOS_Auth_GetMergedAccountByIndex_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t localUserId, uint32_t index))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_GetMergedAccountByIndex_ptr(handle, localUserId, index);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetMergedAccountsCount
static uint32_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_GetMergedAccountsCount_ptr)(intptr_t handle, intptr_t localUserId);
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetMergedAccountsCount(intptr_t handle, intptr_t localUserId)
{
    if (_EOS_Auth_GetMergedAccountsCount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_GetMergedAccountsCount");
        _EOS_Auth_GetMergedAccountsCount_ptr = (uint32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t localUserId))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_GetMergedAccountsCount_ptr(handle, localUserId);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_LinkAccount
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_LinkAccount_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_LinkAccount(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Auth_LinkAccount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_LinkAccount");
        _EOS_Auth_LinkAccount_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_LinkAccount_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_Login
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_Login_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_Login(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Auth_Login_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_Login");
        _EOS_Auth_Login_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_Login_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_Logout
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_Logout_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_Logout(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Auth_Logout_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_Logout");
        _EOS_Auth_Logout_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_Logout_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_VerifyIdToken
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_VerifyIdToken_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_VerifyIdToken(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Auth_VerifyIdToken_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_VerifyIdToken");
        _EOS_Auth_VerifyIdToken_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_VerifyIdToken_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_VerifyUserAuth
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_VerifyUserAuth_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_VerifyUserAuth(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Auth_VerifyUserAuth_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_VerifyUserAuth");
        _EOS_Auth_VerifyUserAuth_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_VerifyUserAuth_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetSelectedAccountId
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_GetSelectedAccountId_ptr)(intptr_t handle, intptr_t localUserId, intptr_t outSelectedAccountId);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetSelectedAccountId(intptr_t handle, intptr_t localUserId, intptr_t outSelectedAccountId)
{
    if (_EOS_Auth_GetSelectedAccountId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_GetSelectedAccountId");
        _EOS_Auth_GetSelectedAccountId_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t localUserId, intptr_t outSelectedAccountId))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_GetSelectedAccountId_ptr(handle, localUserId, outSelectedAccountId);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_GetLoginStatus
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Auth_GetLoginStatus_ptr)(intptr_t handle, intptr_t localUserId);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Auth_GetLoginStatus(intptr_t handle, intptr_t localUserId)
{
    if (_EOS_Auth_GetLoginStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_GetLoginStatus");
        _EOS_Auth_GetLoginStatus_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t localUserId))get_fast_callable_managed_function(t9_name, methodName);
    }
    return _EOS_Auth_GetLoginStatus_ptr(handle, localUserId);
}

// Computed from EOS_SDK.Auth.Auth_Exports._EOS_Auth_DeletePersistentAuth
static void (DNNE_CALLTYPE_STDCALL* _EOS_Auth_DeletePersistentAuth_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Auth_DeletePersistentAuth(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Auth_DeletePersistentAuth_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Auth_DeletePersistentAuth");
        _EOS_Auth_DeletePersistentAuth_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t9_name, methodName);
    }
    _EOS_Auth_DeletePersistentAuth_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_AddNotifyClientActionRequired
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_AddNotifyClientActionRequired_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_AddNotifyClientActionRequired(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_AntiCheatServer_AddNotifyClientActionRequired_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_AddNotifyClientActionRequired");
        _EOS_AntiCheatServer_AddNotifyClientActionRequired_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_AddNotifyClientActionRequired_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged");
        _EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_AddNotifyMessageToClient
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_AddNotifyMessageToClient_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_AddNotifyMessageToClient(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_AntiCheatServer_AddNotifyMessageToClient_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_AddNotifyMessageToClient");
        _EOS_AntiCheatServer_AddNotifyMessageToClient_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_AddNotifyMessageToClient_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_BeginSession
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_BeginSession_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_BeginSession(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_BeginSession_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_BeginSession");
        _EOS_AntiCheatServer_BeginSession_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_BeginSession_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_EndSession
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_EndSession_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_EndSession(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_EndSession_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_EndSession");
        _EOS_AntiCheatServer_EndSession_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_EndSession_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_GetProtectMessageOutputLength
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_GetProtectMessageOutputLength_ptr)(intptr_t handle, intptr_t options, uint32_t outBufferSizeBytes);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_GetProtectMessageOutputLength(intptr_t handle, intptr_t options, uint32_t outBufferSizeBytes)
{
    if (_EOS_AntiCheatServer_GetProtectMessageOutputLength_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_GetProtectMessageOutputLength");
        _EOS_AntiCheatServer_GetProtectMessageOutputLength_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, uint32_t outBufferSizeBytes))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_GetProtectMessageOutputLength_ptr(handle, options, outBufferSizeBytes);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogEvent
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogEvent_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogEvent(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogEvent_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogEvent");
        _EOS_AntiCheatServer_LogEvent_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogEvent_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogGameRoundEnd
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogGameRoundEnd_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogGameRoundEnd(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogGameRoundEnd_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogGameRoundEnd");
        _EOS_AntiCheatServer_LogGameRoundEnd_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogGameRoundEnd_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogGameRoundStart
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogGameRoundStart_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogGameRoundStart(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogGameRoundStart_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogGameRoundStart");
        _EOS_AntiCheatServer_LogGameRoundStart_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogGameRoundStart_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerDespawn
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogPlayerDespawn_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerDespawn(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogPlayerDespawn_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogPlayerDespawn");
        _EOS_AntiCheatServer_LogPlayerDespawn_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogPlayerDespawn_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerRevive
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogPlayerRevive_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerRevive(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogPlayerRevive_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogPlayerRevive");
        _EOS_AntiCheatServer_LogPlayerRevive_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogPlayerRevive_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerSpawn
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogPlayerSpawn_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerSpawn(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogPlayerSpawn_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogPlayerSpawn");
        _EOS_AntiCheatServer_LogPlayerSpawn_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogPlayerSpawn_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerTakeDamage
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogPlayerTakeDamage_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerTakeDamage(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogPlayerTakeDamage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogPlayerTakeDamage");
        _EOS_AntiCheatServer_LogPlayerTakeDamage_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogPlayerTakeDamage_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerTick
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogPlayerTick_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerTick(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogPlayerTick_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogPlayerTick");
        _EOS_AntiCheatServer_LogPlayerTick_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogPlayerTick_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerUseAbility
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogPlayerUseAbility_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerUseAbility(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogPlayerUseAbility_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogPlayerUseAbility");
        _EOS_AntiCheatServer_LogPlayerUseAbility_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogPlayerUseAbility_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_LogPlayerUseWeapon
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_LogPlayerUseWeapon_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_LogPlayerUseWeapon(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_LogPlayerUseWeapon_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_LogPlayerUseWeapon");
        _EOS_AntiCheatServer_LogPlayerUseWeapon_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_LogPlayerUseWeapon_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_ProtectMessage
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_ProtectMessage_ptr)(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_ProtectMessage(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten)
{
    if (_EOS_AntiCheatServer_ProtectMessage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_ProtectMessage");
        _EOS_AntiCheatServer_ProtectMessage_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_ProtectMessage_ptr(handle, options, outBuffer, outBytesWritten);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_ReceiveMessageFromClient
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_ReceiveMessageFromClient_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_ReceiveMessageFromClient(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_ReceiveMessageFromClient_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_ReceiveMessageFromClient");
        _EOS_AntiCheatServer_ReceiveMessageFromClient_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_ReceiveMessageFromClient_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RegisterClient
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_RegisterClient_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RegisterClient(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_RegisterClient_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_RegisterClient");
        _EOS_AntiCheatServer_RegisterClient_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_RegisterClient_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RegisterEvent
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_RegisterEvent_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RegisterEvent(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_RegisterEvent_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_RegisterEvent");
        _EOS_AntiCheatServer_RegisterEvent_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_RegisterEvent_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RemoveNotifyClientActionRequired
static void (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_RemoveNotifyClientActionRequired_ptr)(intptr_t handle, uint64_t notificationId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RemoveNotifyClientActionRequired(intptr_t handle, uint64_t notificationId)
{
    if (_EOS_AntiCheatServer_RemoveNotifyClientActionRequired_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_RemoveNotifyClientActionRequired");
        _EOS_AntiCheatServer_RemoveNotifyClientActionRequired_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t notificationId))get_fast_callable_managed_function(t10_name, methodName);
    }
    _EOS_AntiCheatServer_RemoveNotifyClientActionRequired_ptr(handle, notificationId);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged
static void (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged_ptr)(intptr_t handle, uint64_t notificationId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged(intptr_t handle, uint64_t notificationId)
{
    if (_EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged");
        _EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t notificationId))get_fast_callable_managed_function(t10_name, methodName);
    }
    _EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged_ptr(handle, notificationId);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_RemoveNotifyMessageToClient
static void (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_RemoveNotifyMessageToClient_ptr)(intptr_t handle, uint64_t notificationId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_RemoveNotifyMessageToClient(intptr_t handle, uint64_t notificationId)
{
    if (_EOS_AntiCheatServer_RemoveNotifyMessageToClient_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_RemoveNotifyMessageToClient");
        _EOS_AntiCheatServer_RemoveNotifyMessageToClient_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t notificationId))get_fast_callable_managed_function(t10_name, methodName);
    }
    _EOS_AntiCheatServer_RemoveNotifyMessageToClient_ptr(handle, notificationId);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_SetClientDetails
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_SetClientDetails_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_SetClientDetails(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_SetClientDetails_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_SetClientDetails");
        _EOS_AntiCheatServer_SetClientDetails_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_SetClientDetails_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_SetClientNetworkState
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_SetClientNetworkState_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_SetClientNetworkState(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_SetClientNetworkState_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_SetClientNetworkState");
        _EOS_AntiCheatServer_SetClientNetworkState_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_SetClientNetworkState_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_SetGameSessionId
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_SetGameSessionId_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_SetGameSessionId(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_SetGameSessionId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_SetGameSessionId");
        _EOS_AntiCheatServer_SetGameSessionId_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_SetGameSessionId_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_UnprotectMessage
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_UnprotectMessage_ptr)(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_UnprotectMessage(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten)
{
    if (_EOS_AntiCheatServer_UnprotectMessage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_UnprotectMessage");
        _EOS_AntiCheatServer_UnprotectMessage_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_UnprotectMessage_ptr(handle, options, outBuffer, outBytesWritten);
}

// Computed from EOS_SDK.AntiCheatServer.AntiCheatServer_Exports._EOS_AntiCheatServer_UnregisterClient
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatServer_UnregisterClient_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatServer_UnregisterClient(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatServer_UnregisterClient_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatServer_UnregisterClient");
        _EOS_AntiCheatServer_UnregisterClient_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t10_name, methodName);
    }
    return _EOS_AntiCheatServer_UnregisterClient_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddExternalIntegrityCatalog
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_AddExternalIntegrityCatalog_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddExternalIntegrityCatalog(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatClient_AddExternalIntegrityCatalog_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_AddExternalIntegrityCatalog");
        _EOS_AntiCheatClient_AddExternalIntegrityCatalog_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_AddExternalIntegrityCatalog_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyClientIntegrityViolated
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_AddNotifyClientIntegrityViolated_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyClientIntegrityViolated(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_AntiCheatClient_AddNotifyClientIntegrityViolated_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_AddNotifyClientIntegrityViolated");
        _EOS_AntiCheatClient_AddNotifyClientIntegrityViolated_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_AddNotifyClientIntegrityViolated_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyMessageToPeer
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_AddNotifyMessageToPeer_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyMessageToPeer(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_AntiCheatClient_AddNotifyMessageToPeer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_AddNotifyMessageToPeer");
        _EOS_AntiCheatClient_AddNotifyMessageToPeer_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_AddNotifyMessageToPeer_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyMessageToServer
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_AddNotifyMessageToServer_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyMessageToServer(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_AntiCheatClient_AddNotifyMessageToServer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_AddNotifyMessageToServer");
        _EOS_AntiCheatClient_AddNotifyMessageToServer_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_AddNotifyMessageToServer_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyPeerActionRequired
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_AddNotifyPeerActionRequired_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyPeerActionRequired(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_AntiCheatClient_AddNotifyPeerActionRequired_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_AddNotifyPeerActionRequired");
        _EOS_AntiCheatClient_AddNotifyPeerActionRequired_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_AddNotifyPeerActionRequired_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged");
        _EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_BeginSession
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_BeginSession_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_BeginSession(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatClient_BeginSession_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_BeginSession");
        _EOS_AntiCheatClient_BeginSession_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_BeginSession_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_EndSession
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_EndSession_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_EndSession(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatClient_EndSession_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_EndSession");
        _EOS_AntiCheatClient_EndSession_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_EndSession_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_GetProtectMessageOutputLength
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_GetProtectMessageOutputLength_ptr)(intptr_t handle, intptr_t options, uint32_t outBufferSizeBytes);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_GetProtectMessageOutputLength(intptr_t handle, intptr_t options, uint32_t outBufferSizeBytes)
{
    if (_EOS_AntiCheatClient_GetProtectMessageOutputLength_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_GetProtectMessageOutputLength");
        _EOS_AntiCheatClient_GetProtectMessageOutputLength_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, uint32_t outBufferSizeBytes))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_GetProtectMessageOutputLength_ptr(handle, options, outBufferSizeBytes);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_PollStatus
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_PollStatus_ptr)(intptr_t handle, intptr_t options, int32_t outViolationType, intptr_t outMessage);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_PollStatus(intptr_t handle, intptr_t options, int32_t outViolationType, intptr_t outMessage)
{
    if (_EOS_AntiCheatClient_PollStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_PollStatus");
        _EOS_AntiCheatClient_PollStatus_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, int32_t outViolationType, intptr_t outMessage))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_PollStatus_ptr(handle, options, outViolationType, outMessage);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_ProtectMessage
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_ProtectMessage_ptr)(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_ProtectMessage(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten)
{
    if (_EOS_AntiCheatClient_ProtectMessage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_ProtectMessage");
        _EOS_AntiCheatClient_ProtectMessage_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_ProtectMessage_ptr(handle, options, outBuffer, outBytesWritten);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_ReceiveMessageFromPeer
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_ReceiveMessageFromPeer_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_ReceiveMessageFromPeer(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatClient_ReceiveMessageFromPeer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_ReceiveMessageFromPeer");
        _EOS_AntiCheatClient_ReceiveMessageFromPeer_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_ReceiveMessageFromPeer_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_ReceiveMessageFromServer
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_ReceiveMessageFromServer_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_ReceiveMessageFromServer(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatClient_ReceiveMessageFromServer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_ReceiveMessageFromServer");
        _EOS_AntiCheatClient_ReceiveMessageFromServer_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_ReceiveMessageFromServer_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RegisterPeer
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_RegisterPeer_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RegisterPeer(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatClient_RegisterPeer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_RegisterPeer");
        _EOS_AntiCheatClient_RegisterPeer_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_RegisterPeer_ptr(handle, options);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated
static void (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated_ptr)(intptr_t handle, uint64_t notificationId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated(intptr_t handle, uint64_t notificationId)
{
    if (_EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated");
        _EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t notificationId))get_fast_callable_managed_function(t11_name, methodName);
    }
    _EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated_ptr(handle, notificationId);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyMessageToPeer
static void (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_RemoveNotifyMessageToPeer_ptr)(intptr_t handle, uint64_t notificationId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyMessageToPeer(intptr_t handle, uint64_t notificationId)
{
    if (_EOS_AntiCheatClient_RemoveNotifyMessageToPeer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_RemoveNotifyMessageToPeer");
        _EOS_AntiCheatClient_RemoveNotifyMessageToPeer_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t notificationId))get_fast_callable_managed_function(t11_name, methodName);
    }
    _EOS_AntiCheatClient_RemoveNotifyMessageToPeer_ptr(handle, notificationId);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyMessageToServer
static void (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_RemoveNotifyMessageToServer_ptr)(intptr_t handle, uint64_t notificationId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyMessageToServer(intptr_t handle, uint64_t notificationId)
{
    if (_EOS_AntiCheatClient_RemoveNotifyMessageToServer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_RemoveNotifyMessageToServer");
        _EOS_AntiCheatClient_RemoveNotifyMessageToServer_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t notificationId))get_fast_callable_managed_function(t11_name, methodName);
    }
    _EOS_AntiCheatClient_RemoveNotifyMessageToServer_ptr(handle, notificationId);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyPeerActionRequired
static void (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_RemoveNotifyPeerActionRequired_ptr)(intptr_t handle, uint64_t notificationId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyPeerActionRequired(intptr_t handle, uint64_t notificationId)
{
    if (_EOS_AntiCheatClient_RemoveNotifyPeerActionRequired_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_RemoveNotifyPeerActionRequired");
        _EOS_AntiCheatClient_RemoveNotifyPeerActionRequired_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t notificationId))get_fast_callable_managed_function(t11_name, methodName);
    }
    _EOS_AntiCheatClient_RemoveNotifyPeerActionRequired_ptr(handle, notificationId);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged
static void (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged_ptr)(intptr_t handle, uint64_t notificationId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged(intptr_t handle, uint64_t notificationId)
{
    if (_EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged");
        _EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t notificationId))get_fast_callable_managed_function(t11_name, methodName);
    }
    _EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged_ptr(handle, notificationId);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_UnprotectMessage
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_UnprotectMessage_ptr)(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_UnprotectMessage(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten)
{
    if (_EOS_AntiCheatClient_UnprotectMessage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_UnprotectMessage");
        _EOS_AntiCheatClient_UnprotectMessage_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outBuffer, uint32_t outBytesWritten))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_UnprotectMessage_ptr(handle, options, outBuffer, outBytesWritten);
}

// Computed from EOS_SDK.AntiCheatClient.AntiCheatClient_Exports._EOS_AntiCheatClient_UnregisterPeer
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_AntiCheatClient_UnregisterPeer_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_AntiCheatClient_UnregisterPeer(intptr_t handle, intptr_t options)
{
    if (_EOS_AntiCheatClient_UnregisterPeer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_AntiCheatClient_UnregisterPeer");
        _EOS_AntiCheatClient_UnregisterPeer_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t11_name, methodName);
    }
    return _EOS_AntiCheatClient_UnregisterPeer_ptr(handle, options);
}

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_CopyInfo
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_ActiveSession_CopyInfo_ptr)(intptr_t handle, intptr_t options, intptr_t outActiveSessionInfo);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_CopyInfo(intptr_t handle, intptr_t options, intptr_t outActiveSessionInfo)
{
    if (_EOS_ActiveSession_CopyInfo_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ActiveSession_CopyInfo");
        _EOS_ActiveSession_CopyInfo_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outActiveSessionInfo))get_fast_callable_managed_function(t12_name, methodName);
    }
    return _EOS_ActiveSession_CopyInfo_ptr(handle, options, outActiveSessionInfo);
}

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_GetRegisteredPlayerByIndex
static intptr_t (DNNE_CALLTYPE_STDCALL* _EOS_ActiveSession_GetRegisteredPlayerByIndex_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API intptr_t DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_GetRegisteredPlayerByIndex(intptr_t handle, intptr_t options)
{
    if (_EOS_ActiveSession_GetRegisteredPlayerByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ActiveSession_GetRegisteredPlayerByIndex");
        _EOS_ActiveSession_GetRegisteredPlayerByIndex_ptr = (intptr_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t12_name, methodName);
    }
    return _EOS_ActiveSession_GetRegisteredPlayerByIndex_ptr(handle, options);
}

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_GetRegisteredPlayerCount
static uint32_t (DNNE_CALLTYPE_STDCALL* _EOS_ActiveSession_GetRegisteredPlayerCount_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_GetRegisteredPlayerCount(intptr_t handle, intptr_t options)
{
    if (_EOS_ActiveSession_GetRegisteredPlayerCount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ActiveSession_GetRegisteredPlayerCount");
        _EOS_ActiveSession_GetRegisteredPlayerCount_ptr = (uint32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t12_name, methodName);
    }
    return _EOS_ActiveSession_GetRegisteredPlayerCount_ptr(handle, options);
}

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_Info_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_ActiveSession_Info_Release_ptr)(intptr_t activeSessionInfo);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_Info_Release(intptr_t activeSessionInfo)
{
    if (_EOS_ActiveSession_Info_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ActiveSession_Info_Release");
        _EOS_ActiveSession_Info_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t activeSessionInfo))get_fast_callable_managed_function(t12_name, methodName);
    }
    _EOS_ActiveSession_Info_Release_ptr(activeSessionInfo);
}

// Computed from EOS_SDK.ActiveSession.ActiveSession_Exports._EOS_ActiveSession_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_ActiveSession_Release_ptr)(intptr_t activeSessionHandle);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_ActiveSession_Release(intptr_t activeSessionHandle)
{
    if (_EOS_ActiveSession_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_ActiveSession_Release");
        _EOS_ActiveSession_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t activeSessionHandle))get_fast_callable_managed_function(t12_name, methodName);
    }
    _EOS_ActiveSession_Release_ptr(activeSessionHandle);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_AddNotifyAchievementsUnlocked
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_AddNotifyAchievementsUnlocked_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_AddNotifyAchievementsUnlocked(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_Achievements_AddNotifyAchievementsUnlocked_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_AddNotifyAchievementsUnlocked");
        _EOS_Achievements_AddNotifyAchievementsUnlocked_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_AddNotifyAchievementsUnlocked_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_AddNotifyAchievementsUnlockedV2
static uint64_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_AddNotifyAchievementsUnlockedV2_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn);
DNNE_EXTERN_C DNNE_API uint64_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_AddNotifyAchievementsUnlockedV2(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn)
{
    if (_EOS_Achievements_AddNotifyAchievementsUnlockedV2_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_AddNotifyAchievementsUnlockedV2");
        _EOS_Achievements_AddNotifyAchievementsUnlockedV2_ptr = (uint64_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t notificationFn))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_AddNotifyAchievementsUnlockedV2_ptr(handle, options, clientData, notificationFn);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_RemoveNotifyAchievementsUnlocked
static void (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_RemoveNotifyAchievementsUnlocked_ptr)(intptr_t handle, uint64_t inId);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_RemoveNotifyAchievementsUnlocked(intptr_t handle, uint64_t inId)
{
    if (_EOS_Achievements_RemoveNotifyAchievementsUnlocked_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_RemoveNotifyAchievementsUnlocked");
        _EOS_Achievements_RemoveNotifyAchievementsUnlocked_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, uint64_t inId))get_fast_callable_managed_function(t13_name, methodName);
    }
    _EOS_Achievements_RemoveNotifyAchievementsUnlocked_ptr(handle, inId);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyAchievementDefinitionByAchievementId
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_CopyAchievementDefinitionByAchievementId_ptr)(intptr_t handle, intptr_t options, intptr_t outDefinition);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyAchievementDefinitionByAchievementId(intptr_t handle, intptr_t options, intptr_t outDefinition)
{
    if (_EOS_Achievements_CopyAchievementDefinitionByAchievementId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_CopyAchievementDefinitionByAchievementId");
        _EOS_Achievements_CopyAchievementDefinitionByAchievementId_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outDefinition))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_CopyAchievementDefinitionByAchievementId_ptr(handle, options, outDefinition);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyAchievementDefinitionByIndex
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_CopyAchievementDefinitionByIndex_ptr)(intptr_t handle, intptr_t options, intptr_t outDefinition);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyAchievementDefinitionByIndex(intptr_t handle, intptr_t options, intptr_t outDefinition)
{
    if (_EOS_Achievements_CopyAchievementDefinitionByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_CopyAchievementDefinitionByIndex");
        _EOS_Achievements_CopyAchievementDefinitionByIndex_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outDefinition))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_CopyAchievementDefinitionByIndex_ptr(handle, options, outDefinition);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_Definition_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_Definition_Release_ptr)(intptr_t achievementDefinition);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_Definition_Release(intptr_t achievementDefinition)
{
    if (_EOS_Achievements_Definition_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_Definition_Release");
        _EOS_Achievements_Definition_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t achievementDefinition))get_fast_callable_managed_function(t13_name, methodName);
    }
    _EOS_Achievements_Definition_Release_ptr(achievementDefinition);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId_ptr)(intptr_t handle, intptr_t options, intptr_t outDefinition);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId(intptr_t handle, intptr_t options, intptr_t outDefinition)
{
    if (_EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId");
        _EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outDefinition))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId_ptr(handle, options, outDefinition);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyAchievementDefinitionV2ByIndex
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_CopyAchievementDefinitionV2ByIndex_ptr)(intptr_t handle, intptr_t options, intptr_t outDefinition);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyAchievementDefinitionV2ByIndex(intptr_t handle, intptr_t options, intptr_t outDefinition)
{
    if (_EOS_Achievements_CopyAchievementDefinitionV2ByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_CopyAchievementDefinitionV2ByIndex");
        _EOS_Achievements_CopyAchievementDefinitionV2ByIndex_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outDefinition))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_CopyAchievementDefinitionV2ByIndex_ptr(handle, options, outDefinition);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_DefinitionV2_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_DefinitionV2_Release_ptr)(intptr_t achievementDefinition);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_DefinitionV2_Release(intptr_t achievementDefinition)
{
    if (_EOS_Achievements_DefinitionV2_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_DefinitionV2_Release");
        _EOS_Achievements_DefinitionV2_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t achievementDefinition))get_fast_callable_managed_function(t13_name, methodName);
    }
    _EOS_Achievements_DefinitionV2_Release_ptr(achievementDefinition);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyPlayerAchievementByAchievementId
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_CopyPlayerAchievementByAchievementId_ptr)(intptr_t handle, intptr_t options, intptr_t outAchievement);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyPlayerAchievementByAchievementId(intptr_t handle, intptr_t options, intptr_t outAchievement)
{
    if (_EOS_Achievements_CopyPlayerAchievementByAchievementId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_CopyPlayerAchievementByAchievementId");
        _EOS_Achievements_CopyPlayerAchievementByAchievementId_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outAchievement))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_CopyPlayerAchievementByAchievementId_ptr(handle, options, outAchievement);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyPlayerAchievementByIndex
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_CopyPlayerAchievementByIndex_ptr)(intptr_t handle, intptr_t options, intptr_t outAchievement);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyPlayerAchievementByIndex(intptr_t handle, intptr_t options, intptr_t outAchievement)
{
    if (_EOS_Achievements_CopyPlayerAchievementByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_CopyPlayerAchievementByIndex");
        _EOS_Achievements_CopyPlayerAchievementByIndex_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outAchievement))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_CopyPlayerAchievementByIndex_ptr(handle, options, outAchievement);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_PlayerAchievement_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_PlayerAchievement_Release_ptr)(intptr_t achievement);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_PlayerAchievement_Release(intptr_t achievement)
{
    if (_EOS_Achievements_PlayerAchievement_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_PlayerAchievement_Release");
        _EOS_Achievements_PlayerAchievement_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t achievement))get_fast_callable_managed_function(t13_name, methodName);
    }
    _EOS_Achievements_PlayerAchievement_Release_ptr(achievement);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_GetAchievementDefinitionCount
static uint32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_GetAchievementDefinitionCount_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_GetAchievementDefinitionCount(intptr_t handle, intptr_t options)
{
    if (_EOS_Achievements_GetAchievementDefinitionCount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_GetAchievementDefinitionCount");
        _EOS_Achievements_GetAchievementDefinitionCount_ptr = (uint32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_GetAchievementDefinitionCount_ptr(handle, options);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_GetPlayerAchievementCount
static uint32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_GetPlayerAchievementCount_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_GetPlayerAchievementCount(intptr_t handle, intptr_t options)
{
    if (_EOS_Achievements_GetPlayerAchievementCount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_GetPlayerAchievementCount");
        _EOS_Achievements_GetPlayerAchievementCount_ptr = (uint32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_GetPlayerAchievementCount_ptr(handle, options);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_GetUnlockedAchievementCount
static uint32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_GetUnlockedAchievementCount_ptr)(intptr_t handle, intptr_t options);
DNNE_EXTERN_C DNNE_API uint32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_GetUnlockedAchievementCount(intptr_t handle, intptr_t options)
{
    if (_EOS_Achievements_GetUnlockedAchievementCount_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_GetUnlockedAchievementCount");
        _EOS_Achievements_GetUnlockedAchievementCount_ptr = (uint32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_GetUnlockedAchievementCount_ptr(handle, options);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_QueryDefinitions
static void (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_QueryDefinitions_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_QueryDefinitions(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Achievements_QueryDefinitions_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_QueryDefinitions");
        _EOS_Achievements_QueryDefinitions_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t13_name, methodName);
    }
    _EOS_Achievements_QueryDefinitions_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_QueryPlayerAchievements
static void (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_QueryPlayerAchievements_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_QueryPlayerAchievements(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Achievements_QueryPlayerAchievements_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_QueryPlayerAchievements");
        _EOS_Achievements_QueryPlayerAchievements_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t13_name, methodName);
    }
    _EOS_Achievements_QueryPlayerAchievements_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_UnlockAchievements
static void (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_UnlockAchievements_ptr)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_UnlockAchievements(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate)
{
    if (_EOS_Achievements_UnlockAchievements_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_UnlockAchievements");
        _EOS_Achievements_UnlockAchievements_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t clientData, intptr_t completionDelegate))get_fast_callable_managed_function(t13_name, methodName);
    }
    _EOS_Achievements_UnlockAchievements_ptr(handle, options, clientData, completionDelegate);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyUnlockedAchievementByAchievementId
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_CopyUnlockedAchievementByAchievementId_ptr)(intptr_t handle, intptr_t options, intptr_t outAchievement);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyUnlockedAchievementByAchievementId(intptr_t handle, intptr_t options, intptr_t outAchievement)
{
    if (_EOS_Achievements_CopyUnlockedAchievementByAchievementId_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_CopyUnlockedAchievementByAchievementId");
        _EOS_Achievements_CopyUnlockedAchievementByAchievementId_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outAchievement))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_CopyUnlockedAchievementByAchievementId_ptr(handle, options, outAchievement);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_CopyUnlockedAchievementByIndex
static int32_t (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_CopyUnlockedAchievementByIndex_ptr)(intptr_t handle, intptr_t options, intptr_t outAchievement);
DNNE_EXTERN_C DNNE_API int32_t DNNE_CALLTYPE_STDCALL _EOS_Achievements_CopyUnlockedAchievementByIndex(intptr_t handle, intptr_t options, intptr_t outAchievement)
{
    if (_EOS_Achievements_CopyUnlockedAchievementByIndex_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_CopyUnlockedAchievementByIndex");
        _EOS_Achievements_CopyUnlockedAchievementByIndex_ptr = (int32_t(DNNE_CALLTYPE_STDCALL*)(intptr_t handle, intptr_t options, intptr_t outAchievement))get_fast_callable_managed_function(t13_name, methodName);
    }
    return _EOS_Achievements_CopyUnlockedAchievementByIndex_ptr(handle, options, outAchievement);
}

// Computed from EOS_SDK.Achievements.Achievements_Exports._EOS_Achievements_UnlockedAchievement_Release
static void (DNNE_CALLTYPE_STDCALL* _EOS_Achievements_UnlockedAchievement_Release_ptr)(intptr_t achievement);
DNNE_EXTERN_C DNNE_API void DNNE_CALLTYPE_STDCALL _EOS_Achievements_UnlockedAchievement_Release(intptr_t achievement)
{
    if (_EOS_Achievements_UnlockedAchievement_Release_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("_EOS_Achievements_UnlockedAchievement_Release");
        _EOS_Achievements_UnlockedAchievement_Release_ptr = (void(DNNE_CALLTYPE_STDCALL*)(intptr_t achievement))get_fast_callable_managed_function(t13_name, methodName);
    }
    _EOS_Achievements_UnlockedAchievement_Release_ptr(achievement);
}

#endif // DNNE_COMPILE_AS_SOURCE
